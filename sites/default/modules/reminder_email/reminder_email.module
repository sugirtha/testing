<?php
function reminder_email_cron(){
	//automaitc reminder to editor regarding the reviewer has been invited but he/she has not accepted/rejected the invite
	$result_accept = db_query("SELECT * FROM `paper_reviewer` WHERE `accept` = 0 AND `next_reminder` > 0");
	foreach ($result_accept as $record_accept) {
		$date=date_create();
		date_timestamp_set($date,$record_accept->{"next_reminder"});
		$t = time();
		$today_date=date_create();
		date_timestamp_set($today_date,$t);
		if(date_format($today_date,"Y-m-d") == date_format($date,"Y-m-d")){
			

         $reviewer = user_load($record_accept->ruid);

         $sub = variable_get('email_rev_reminder_subject', REV_REMINDER_SUB);
         $message = variable_get('email_rev_reminder_message', REV_REMINDER_MSG);

         $sub = replace_email_tokens($record_accept->nid, $sub);
         $message = replace_email_tokens($record_accept->nid, $message);
         $message = str_replace('{{reviewer}}', $reviewer->name, $message);
         $token = get_token($reviewer);
         $direct_url = url(drupal_get_path_alias('node/' . $record_accept -> nid), array('absolute'=> TRUE, 'query' => array('l' => $token)));
         $message = str_replace('{{direct_url}}', $direct_url, $message);
         $params['subject'] = $sub;
         $params['message'] = $message;
         drupal_mail('testaction', 'one-one', $reviewer->mail, '', $params);
      
         update_actions_table(4, $res->nid, $res->vid, '<b>Automatic Reminder Sent<br/>To :</b> ' . $reviewer->mail . '<br/><b>subject :</b> ' . $params['subject'] . '<br/> <b>message: </b>' . $params['message'], 1, 1);
           $next_rem = time() + variable_get('review_management_followup', 7) * 24 * 60 * 60;
           $query = db_update('paper_reviewer') -> fields(array(
                'next_reminder' => $next_rem,
                )) -> condition('nid', $res->nid, '=') -> condition('vid', $res->vid, '=') -> condition('ruid', $res->ruid, '=') -> execute();

		}
	}

	//remider to EIC or editor regarding the reviewer has accepted the invitation to review but has not submitted the review.
	$result_submitted = db_query("SELECT * FROM `paper_reviewer` WHERE `submitted` = 0 AND `accept` = 1 AND `next_reminder` > 0");
	foreach ($result_submitted as $record_submitted) {
		$date=date_create();
		date_timestamp_set($date,$record_submitted->{"next_reminder"});
		$t = time();
		$today_date=date_create();
		date_timestamp_set($today_date,$t);
		if(date_format($today_date,"Y-m-d") == date_format($date,"Y-m-d")){
			
		  $reviewer = user_load($record_accept->ruid);

         $sub = variable_get('email_accept_rev_reminder_subject', ACCEPT_REV_REMINDER_SUB);
         $message = variable_get('email_accept_rev_reminder_message', ACCEPT_REV_REMINDER_MSG);

         $sub = replace_email_tokens($record_accept->nid, $sub);
         $message = replace_email_tokens($record_accept->nid, $message);
         $message = str_replace('{{reviewer}}', $reviewer->name, $message);
         $token = get_token($reviewer);
         $direct_url = url(drupal_get_path_alias('node/' . $record_accept -> nid), array('absolute'=> TRUE, 'query' => array('l' => $token)));
         $message = str_replace('{{direct_url}}', $direct_url, $message);
         $params['subject'] = $sub;
         $params['message'] = $message;
         drupal_mail('testaction', 'one-one', $reviewer->mail, '', $params);
      
         update_actions_table(4, $res->nid, $res->vid, '<b>Automatic Reminder Sent<br/>To :</b> ' . $reviewer->mail . '<br/><b>subject :</b> ' . $params['subject'] . '<br/> <b>message: </b>' . $params['message'], 1, 1);
           $next_rem = time() + variable_get('review_management_followup', 7) * 24 * 60 * 60;
           $query = db_update('paper_reviewer') -> fields(array(
                'next_reminder' => $next_rem,
                )) -> condition('nid', $res->nid, '=') -> condition('vid', $res->vid, '=') -> condition('ruid', $res->ruid, '=') -> execute();


		}
	}

	//reminder email to responsible editor
	$result_editor_reminder = db_query("SELECT * FROM `editor_reminder` WHERE `next_reminder` > 0");
	foreach ($result_editor_reminder as $record_editor_reminder) {
		$date=date_create();
		date_timestamp_set($date,$record_editor_reminder->{"next_reminder"});
		$t = time();
		$today_date=date_create();
		date_timestamp_set($today_date,$t);
		if(date_format($today_date,"Y-m-d") == date_format($date,"Y-m-d")){
			

        $editor = user_load($record_editor_reminder->ruid);
        $sub = variable_get('email_editor_reminder_subject', EDITOR_REMINDER_SUB);
        $msg = variable_get('email_editor_reminder_message', EDITOR_REMINDER_MSG);
        $msg = replace_email_tokens($record_editor_reminder->nid, $msg);
        $sub = replace_email_tokens($record_editor_reminder->nid, $sub);
        $params = array();
        $params['message'] = $msg;
        $params['subject'] = $sub;

         drupal_mail('testaction', 'one-one', $editor->mail, '', $params);

         update_actions_table(4, $res->nid, $res->vid, '<b>Automatic Reminder Sent<br/>To :</b> ' . $editor->mail . '<br/><b>subject :</b> ' . $params['subject'] . '<br/> <b>message: </b>' . $params['message'], 1, 1);
          $next_rem = time() + variable_get('review_management_edit_followup', 7) * 24 * 60 * 60;
            //udpate next reminder date;
           $query = db_update('editor_reminder') -> fields(array(
                'next_reminder' => $next_rem,

                )) -> condition('nid', $res->nid, '=') -> condition('vid', $res->vid, '=') -> condition('ruid', $res->ruid, '=') -> execute();


		}
	}
}

/**
 * Implementation of hook_mail().
 */
function reminder_email_mail($key, &$message, $params){
	echo "inside email";

  // Set the mail content type to html to send an html e-mail (optional).
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';

  // Grab the subject and body from params and add it to the message.
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];

  switch ($key) {
    case "reminder_email_accept":
      // Make other changes here if desired...
      break;

    case "reminder_email_reviewer":
      // Make other changes here if desired...
      break;

    case "reminder_email_submitted":
      // Make other changes here if desired...
      break;

    case "reminder_email_editor":
      // Make other changes here if desired...
      break;
  }

}


?>
